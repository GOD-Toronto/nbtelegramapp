name: "Build and Deploy"
on:
  workflow_dispatch:
  push:
    branches:
      - github_actions

env: 
  AWS_REGION: ca-central-1
  S3BUCKET: nama-bhiksha
  applicationfolder: nbtelegramapp

jobs: 
  build: 
    name: "Build and Package"
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v1
      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws-region: "${{ env.AWS_REGION }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      
      - name: "Set up JDK 17"
        uses: actions/setup-java@v2
        with: 
          cache: gradle
          distribution: adopt
          java-version: 17

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Test with Gradle
        run: ./gradlew clean test

      - name: Build and analyze
        run: ./gradlew build --info

      - name: "clear the s3 bucket"
        run: aws s3 rm s3://${{ env.S3BUCKET }}/ --recursive  

      - name: "Copy JAR to S3"
        run: aws s3 sync ./build/libs/ s3://nama-bhiksha

      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2 

      - name: Deploy on AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY  }}
          HOSTNAME: ${{ secrets.HOSTNAME  }}
          USER_NAME: ${{ secrets.USERNAME  }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME}          
          rm -rf private_key.pem
      #  ./.github/scripts/test.sh
          
      #     rm -rf private_key.pem
      # - name: Remove github actions IP from security group
      #   env:
      #     AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
      #   run: |
      #     aws ec2 revoke-security-group-ingress --group-id ${{ env.AWS_SECURITY_GROUP }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/16
      #   if: always()
